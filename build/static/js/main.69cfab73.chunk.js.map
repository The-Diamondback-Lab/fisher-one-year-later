{"version":3,"sources":["config/serviceWorker.config.js","config/constants.config.js","app/atoms/jsx/Heading.jsx","app/atoms/jsx/Button.jsx","app/atoms/jsx/Icon.jsx","app/atoms/jsx/Layout.jsx","config/routes.config.js","app/atoms/jsx/NavigationItem.jsx","app/pages/jsx/Index.jsx","app/templates/jsx/Section.jsx","app/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","WINDOW_LOCATION","axios","create","localStorage","href","WINDOW_PATH","URI","parse","path","PRODUCTION","includes","ROOT","app","document","getElementById","lightbox","sidebar","Heading","React","_ref","heading","react","className","dangerouslySetInnerHTML","__html","Icon","name","icon","Layout","title","this","props","_this$props","page","children","concat","ROUTES_ARR","component","$","addClass","removeClass","react_default","a","createElement","Layout_Layout","Component","jsx_Heading","App","BrowserRouter","lib_default","id","process","debug","Switch","map","route","i","Route","exact","key","render","Object","assign","ReactDOM","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69cfab73.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// packages\nimport axios from 'axios';\nimport URI from 'urijs';\n\n/**\n * Application constants.\n *\n * @file Constants\n * @author Lexus Drumgold <lex@lexusdrumgold.design>\n */\n\n//  singletons\nconst AXIOS_INSTANCE = axios.create();\nconst LOCAL_STORAGE = window.localStorage;\nconst WINDOW_LOCATION = window.location.href;\nconst WINDOW_PATH = URI.parse(WINDOW_LOCATION).path;\nconst PRODUCTION =\n  !WINDOW_LOCATION.includes('netlify') && WINDOW_PATH.includes('/admin');\n\n// html elements\nconst ROOT = {\n  app: document.getElementById('app'),\n  lightbox: document.getElementById('lightbox'),\n  sidebar: document.getElementById('sidebar')\n};\n\n// style\nconst BREAKPOINTS = {\n  xsmall: 320,\n  small: 480,\n  schmedium: 768,\n  medium: 980,\n  large: 1200,\n  xlarge: 1440\n};\n\nconst LANDING_IMAGE_URL = 'https://firebasestorage.googleapis.com/v0/b/terpbase.appspot.com/o/assets%2Fimages%2Flanding.jpg?alt=media&token=e9dc68c0-370d-4119-816e-e749b3d7bfd7';\n\nexport {\n  AXIOS_INSTANCE, LOCAL_STORAGE, WINDOW_LOCATION, WINDOW_PATH, PRODUCTION, ROOT, BREAKPOINTS, LANDING_IMAGE_URL\n};\n","// packages\nimport * as React from 'react';\n\nconst Heading = ({ heading }) => {\n  return (\n    <h2 className='ada-heading' dangerouslySetInnerHTML={{ __html: heading }} />\n  );\n};\n\nexport default Heading;\n","// packages\nimport * as React from 'react';\nimport { HashLink as Link } from 'react-router-hash-link';\n\nexport default class Button extends React.Component {\n  render() {\n    let { link, to, className, id, onClick, children } = this.props;\n\n    if (link) {\n      return (\n        <Link smooth to={to} className={`ada-button ${className}`}>\n          {children}\n        </Link>\n      );\n    }\n\n    return (\n      <button className={`ada-button ${className}`} id={id} onClick={onClick} >\n        {children}\n      </button>\n    );\n  }\n}\n","// packages\nimport * as React from 'react';\n\nconst Icon = ({ name }) => {\n  let icon = <i className='ada-icon far fa-sync-alt fa-spin' />\n\n  if (name === 'bars') icon = <i className='ada-icon fas fa-bars' />;\n  if (name === 'intro') icon = <i className='ada-icon far fa-home-heart' />;\n  if (name === 'friends') icon = <i className='ada-icon far fa-users' />;\n  if (name === 'night') icon = <i className='ada-icon fa fa-cloud-moon' />;\n  if (name === 'morning') icon = <i className='ada-icon fal fa-sunrise' />;\n  if (name === 'professor') icon = <i className='ada-icon fal fa-university' />;\n  if (name === 'police') icon = <i className='ada-icon fal fa-star' />;\n  if (name === 'b&b') icon = <i className='ada-icon fal fa-building' />;\n  if (name === 'twitter') icon = <i className='ada-icon fab fa-twitter' />;\n  if (name === 'facebook') icon = <i className='ada-icon fab fa-facebook' />;\n  if (name === 'web') icon = <i className='ada-icon fal fa-globe' />;\n\n  return icon;\n};\n\nexport default Icon;\n","// packages\nimport * as React from 'react';\n\nexport default class Layout extends React.Component {\n  componentDidMount() {\n    document.title = this.props.name;\n  }\n\n  render() {\n    const { page, children } = this.props;\n\n    return (\n      <div className={`adp-${page}`}>\n        <div className='ada-container'>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n","// pages\nimport { Index } from '../app/pages';\n\n// templates\nimport { Section } from '../app/templates';\n\n/**\n * React Router configuration.\n *\n * @file Client side routes using React Router\n * @author Lexus Drumgold <lex@lexusdrumgold.design>\n */\n\n// routes\nconst INDEX_ROUTE = {\n  path: '/',\n  component: Index,\n  name: 'Fisher: 1 Year Later'\n};\n\nconst SECTION_ROUTE = {\n  path: '/story/:section',\n  component: Section,\n  name: 'Section'\n};\n\n// route arrays\nconst ROUTES_ARR = [\n  INDEX_ROUTE,\n  SECTION_ROUTE\n];\n\nexport { ROUTES_ARR };\n","/* eslint-disable camelcase */\n/* eslint-disable space-before-function-paren */\n\n// packages\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n// atoms\nimport Icon from './Icon.jsx';\n\nexport default class NavigationItem extends React.Component {\n  componentDidMount() {\n\n  }\n\n  render() {\n    const { path, icon } = this.props;\n\n    return (\n      <NavLink to={path} className='ada-navigation-item'>\n        <Icon name={icon} />\n      </NavLink>\n    );\n  }\n}\n","// packages\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport $ from 'jquery';\n\n// templates\nimport { Layout } from '../../atoms';\n\nexport default class Index extends React.Component {\n  componentDidMount() {\n    $('#app').addClass('index');\n  }\n\n  componentWillUnmount() {\n    $('#app').removeClass('index');\n  }\n\n  render() {\n    const { name } = this.props;\n\n    return (\n      <Layout page='index' name={name}>\n\n      </Layout>\n    );\n  }\n}\n","// packages\nimport * as React from 'react';\n\n// atoms\nimport { Heading, Text } from '../../atoms';\n\nexport default class Section extends React.Component {\n  componentDidMount() {\n    document.title = this.props.name;\n  }\n\n  render() {\n    const { name } = this.props;\n\n    return (\n      <div className='adt-section'>\n        <div className='ada-container'>\n          <Heading heading='Section' />\n        </div>\n      </div>\n    );\n  }\n}\n","// packages\nimport * as React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Analytics from 'react-router-ga';\n\n// config\nimport { PRODUCTION } from '../config/constants.config';\nimport { ROUTES_ARR } from '../config/routes.config';\n\n// style\nimport './app.css';\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    /*\n     * if a user tries to access /admin with the hostname netlify,\n     * redirect to the 404 page\n     */\n    if (PRODUCTION) window.location.href = '/404';\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <Analytics id={process.env.REACT_APP_GOOGLE_ANALYTICS_ID} debug>\n          <Switch>\n            {ROUTES_ARR.map((route, i) => (\n              <Route\n                exact={i === 0} path={route.path} key={`route-${i}`}\n                render={props =>\n                  <route.component {...props} {...route} />\n                }\n              />\n            ))}\n          </Switch>\n        </Analytics>\n      </BrowserRouter>\n    );\n  }\n}\n","// packages\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\n// config + constants\nimport * as service_worker from './config/serviceWorker.config';\nimport { ROOT } from './config/constants.config';\n\n// application\nimport App from './app/App.jsx';\n\n/*\n * Entry point. Sets initial state and renders React components.\n */\n\n// render application\nReactDOM.render(<App />, ROOT.app);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls. Learn\n * more about service workers: http://bit.ly/CRA-PWA\n */\nservice_worker.unregister();\n"],"sourceRoot":""}